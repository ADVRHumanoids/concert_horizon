solver:
  type: ilqr
  ipopt.linear_solver: ma57
  ipopt.tol: 0.1
  ilqr.tol: 0.01
  ipopt.constr_viol_tol: 0.01
  ilqr.constr_viol_tol: 0.01
#  ipopt.hessian_approximation: exact
  ipopt.print_level: 5
  ipopt.suppress_all_output: 'yes'
  ipopt.sb: 'yes'
  ilqr.suppress_all_output: 'yes'
  ilqr.codegen_enabled: true
  ilqr.codegen_workdir: /tmp/soafwg
  ilqr.enable_gn: true
  ilqr.hxx_reg_base: 0.0
  ilqr.n_threads: 0
  print_time: 0

#constraints:
#  - rolling_contact_1
#  - rolling_contact_2
#  - rolling_contact_3
#  - rolling_contact_4

costs:
  - ee_force
  - base_force
#  - ee_xy_force
#  - ee_z_force
#  - ee_ci
#  - final_base_xy # only required if rolling contacts are active
  - velocity_regularization
  - acceleration_regularization
#  - posture_cart # only required if rolling contacts are active
  - posture_arm
  - posture_base # only required if rolling contacts are NOT active


.define:
    - &w_vel 0.3 #0.025
    - &w_acc 1e-2
    - &w_e_f 0. # starting with zero weight for ee task
    - &w_e_fb 0.
#    - &w_e_xy_f 1.
#    - &w_e_z_f 1.
#    - &w_e_ci 1.
    # - &w_base_xy 1.
    # - &w_postural_cart 0.01
    - &w_postural_arm 0.1
    - &wheel_radius 0.16
    - &w_postural_base 0. # starting with zero weight for base task

ee_force:
  type: Cartesian
  distal_link: ee_E
  indices: [0, 1]
  nodes: all
  weight: *w_e_f

base_force:
  type: Cartesian
  distal_link: base_link
  indices: [3, 4, 5]
  nodes: all
  weight: *w_e_fb

#ee_xy_force:
#  type: Cartesian
#  distal_link: ee_E
#  indices: [0, 1]
#  nodes: all
#  weight: *w_e_xy_f
#
#ee_z_force:
#  type: Cartesian
#  distal_link: ee_E
#  indices: [2]
#  nodes: all
#  weight: *w_e_z_f

#ee_ci:
#  type: Cartesian
#  distal_link: ee_E
#  indices: [0, 1, 2]
#  nodes: ${range(5, N)}
#  weight: *w_e_ci

# final_base_xy:
#   type: Cartesian
#   distal_link: base_link
#   indices: [0, 1]
# #  nodes: ${range(5, N)}
#   nodes: all
#   cartesian_type: velocity
#   weight: *w_base_xy

posture_base:
  type: Cartesian
  distal_link: base_link
  nodes: all
  indices: [0, 1, 2, 3, 4, 5]
  cartesian_type: velocity
  weight: *w_postural_base

rolling_contact_1:
  type: Rolling
  frame: J_wheel_A
  radius: *wheel_radius
  nodes: all

rolling_contact_2:
  type: Rolling
  frame: J_wheel_B
  radius: *wheel_radius
  nodes: all

rolling_contact_3:
  type: Rolling
  frame: J_wheel_C
  radius: *wheel_radius
  nodes: all

rolling_contact_4:
  type: Rolling
  frame: J_wheel_D
  radius: *wheel_radius
  nodes: all

# ==================================
# posture_cart:
#   type: Postural
#   weight: *w_postural_cart
#   indices: [0, 2, 4, 6] # wheels at the beginning of q
# #  indices: [6, 8, 10, 12]
#   nodes: all

posture_arm:
  type: Postural
  weight: *w_postural_arm
  indices: [8, 9, 10, 11, 12, 13] # wheels at the beginning of q
#  indices: [0, 1, 2, 3, 4, 5]
  nodes: all

# todo: wrong, as the order COUNTS. If I add the contacts after the joint regularization, they wont get considered.
velocity_regularization:
  type: Regularization
  nodes: all
#  indices: [0, 2, 4, 6,
#            8, 9, 10, 11, 12, 13]
  weight:
    velocity: *w_vel

acceleration_regularization:
  type: Regularization
  nodes: all
#  indices: [ 0, 2, 4, 6,
#             8, 9, 10, 11, 12, 13 ]
  weight:
    acceleration: *w_acc # 0.01

#force_regularization:
#  type: Regularization
#  nodes: all
#  weight:
#    force: 1e-4 # todo <----- how to do? if there are more forces...

